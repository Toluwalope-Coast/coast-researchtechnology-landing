import React from "react";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";

// Define form schema for validation
const FormSchema = z.object({
  email: z.string().email({ message: "Invalid email format" }).min(1, { message: "Email is required" }),
  password: z.string().min(5, { message: "Password must be at least 5 characters long" }),
});

const InputForm: React.FC = () => {
  // Initialize form with useForm hook
  const { register, handleSubmit, formState: { errors } } = useForm<z.infer<typeof FormSchema>>({
    resolver: zodResolver(FormSchema),
    defaultValues: {
      email: "",
      password: "",
    },
  });

  // Handle form submission
  const onSubmit = (data: z.infer<typeof FormSchema>) => {
    console.log(data);
    // Handle form submission
  };

  return (
    <Form onSubmit={handleSubmit(onSubmit)} className="w-2/3 space-y-6">
      {/* Form fields for email and password */}
      <FormItem>
        <FormLabel>Email</FormLabel>
        <FormControl>
          <Input type="email" placeholder="Enter your email" {...register("email")} />
        </FormControl>
        {errors.email && <p>{errors.email.message}</p>}
      </FormItem>
      <FormItem>
        <FormLabel>Password</FormLabel>
        <FormControl>
          <Input type="password" placeholder="Enter your password" {...register("password")} />
        </FormControl>
        {errors.password && <p>{errors.password.message}</p>}
      </FormItem>
      {/* Submit button */}
      <Button type="submit">Submit</Button>
    </Form>
  );
};

export default InputForm;
